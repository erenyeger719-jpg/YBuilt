name: Publish (OIDC + Cosign)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (skip push and release)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  contents: write       # for releases/uploading
  packages: write       # push to registry
  id-token: write       # OIDC token for keyless cosign
  actions: read
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ARTIFACT_DIR: artifacts

jobs:
  build-and-publish:
    name: Build, SBOM, Sign & Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Build Tools
        run: |
          sudo apt-get update && sudo apt-get install -y jq wget curl git tar gzip ca-certificates
          mkdir -p ${{ env.ARTIFACT_DIR }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:latest

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.11.0'  # pin a tested version

      - name: Reproducible build (artifacts)
        id: build
        run: |
          chmod +x scripts/reproducible-build.sh
          # Use commit timestamp for determinism
          export SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)
          export TZ=UTC
          bash scripts/reproducible-build.sh
        env:
          CI: true

      - name: Generate SBOM (CycloneDX)
        run: |
          chmod +x scripts/generate-cyclonedx-sbom.sh
          bash scripts/generate-cyclonedx-sbom.sh
        env:
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}

      - name: Generate provenance (SLSA)
        run: |
          chmod +x scripts/provenance/attest-oci.js
          node scripts/provenance/attest-oci.js --out "${{ env.ARTIFACT_DIR }}/provenance.json" --image "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_RUN_ID: ${{ github.run_id }}

      - name: Login to GHCR (only if not dry-run)
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image with cache (only if not dry-run)
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            SOURCE_DATE_EPOCH=${{ steps.build.outputs.SOURCE_DATE_EPOCH || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign artifacts / image with cosign
        id: sign
        run: |
          chmod +x scripts/cosign-sign-artifacts.sh
          # If you published an image above, sign the image; otherwise sign the bundle artifact
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          ARTIFACT="${{ env.ARTIFACT_DIR }}/dist.tar.gz"
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "Dry run: signing in dry-run mode"
            bash scripts/cosign-sign-artifacts.sh --artifact "${ARTIFACT}" --dry-run
          else
            # Prefer image signing if image exists
            if docker manifest inspect "${IMAGE_REF}" >/dev/null 2>&1; then
              bash scripts/cosign-sign-artifacts.sh --image "${IMAGE_REF}"
            else
              bash scripts/cosign-sign-artifacts.sh --artifact "${ARTIFACT}"
            fi
          fi
        env:
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
          COSIGN_KEY: ${{ secrets.COSIGN_KEY }} # optional fallback; keyless will be used if not set

      - name: Verify SBOM & signature
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          chmod +x ci/verify-sbom-and-cosign.sh
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          bash ci/verify-sbom-and-cosign.sh "${IMAGE_REF}"
        env:
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-artifacts
          path: |
            artifacts/dist.tar.gz
            artifacts/dist.tar.gz.sha256
            artifacts/sbom.json
            artifacts/provenance.json
          retention-days: 90

      - name: Create GitHub release (if tag and not dry-run)
        if: ${{ github.event.inputs.dry_run != 'true' && startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/dist.tar.gz
            artifacts/dist.tar.gz.sha256
            artifacts/sbom.json
            artifacts/provenance.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
